<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Lazydigger Create</title>
    <style>
        dummydeclaration {
            padding-left: 4em;
        }

        /* Firefox ignores first declaration for some reason */
        tab1 {
            padding-left: 4em;
        }

        tab2 {
            padding-left: 8em;
        }

        tab3 {
            padding-left: 12em;
        }

        /* Popup container - can be anything you want */
        .popup {
            position: relative;
            display: inline-block;
            cursor: pointer;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* The actual popup */
        .popup .popuptext {
            visibility: hidden;
            width: 300px;
            height: 150px;
            background-color: #555;
            color: #fff;
            text-align: left;
            border-radius: 6px;
            padding: 8px 0;
            position: absolute;
            z-index: 1;
            top: 200%;
            left: 100%;
            margin-left: -80px;
        }

        /* Popup arrow */
        .popup .popuptext::after {
            content: "";
            position: absolute;
            bottom: 100%;
            left: 20%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #555 transparent transparent transparent;
        }

        /* Toggle this class - hide and show the popup */
        .popup .show {
            visibility: visible;
            -webkit-animation: fadeIn 1s;
            animation: fadeIn 1s;
        }

        /* Add animation (fade in the popup) */
        @-webkit-keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
        <script src="js/global_variable.js"></script>
        <script src="js/config.js"></script>
        <script src="js/waxjs.js"></script>
        <script src="js/lib/int64-buffer.min.js"></script>
        <script src="js/lib/eosjs-numeric.js"></script>
        <script src="js/lib/eosjs-serialize.js"></script>
        <script src="js/function.js"></script>
        <script src="js/fetchData.js"></script>
        <script src="js/bot.js"></script>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-XSW8F4PRTJ"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-XSW8F4PRTJ');
    </script>
</head>

<body class="bg-dark text-white">
    <div class="card-body">
        <div class="col">
            <div>
                <span class="fs-5 font-weight-bold"><b>Account: </b></span>
                <span id="user_account" class="fs-5 font-weight-bold"> xxxxx.wam</span>
                <br>
            </div>
            <div>
                <!-- NAME -->
                <span class="fs-6 badge badge-secondary" style="width: 130px;">Character name</span>
                <input type="text" id="char_name" placeholder="MyNameIsJaff"
                    style="width: 150px; margin-left: 10px; margin-top: 10px; margin-bottom: 10px; padding-left: 5px;">
                <button id="char_name_btn" type="button" class="btn btn-danger"
                    style="margin-left: 15px; margin-top: 10px; margin-bottom: 10px; ">SAVE</button>
            </div>
            <div>
                <!-- SET STAKE -->
                <span class="fs-6 badge badge-secondary" style="width: 130px;">STAKE</span>
                <input type="number" id="stake" placeholder="0.00000000 WAX"
                    style="width: 150px; margin-left: 10px; margin-top: 10px; margin-bottom: 10px; padding-left: 5px;">
                <button id="stake_btn" type="button" class="btn btn-danger"
                    style="margin-left: 15px; margin-top: 10px; margin-bottom: 10px; ">STAKE CPU</button>
                <button id="unstake_btn" type="button" class="btn btn-danger"
                    style="margin-left: 15px; margin-top: 10px; margin-bottom: 10px; ">UNSTAKE CPU</button>
            </div>
            <div>
                <!-- SET LAND -->
                <span class="fs-6 badge badge-secondary" style="width: 130px;">Set Land</span>
                <input type="number" id="set_land" placeholder="1099512960003"
                    style="width: 150px; margin-left: 10px; margin-top: 10px; margin-bottom: 10px; padding-left: 5px;">
                <button id="land_btn" type="button" class="btn btn-danger"
                    style="margin-left: 15px; margin-top: 10px; margin-bottom: 10px; ">Change</button>
            </div>
            <div>
                <!-- SET BAG -->
                <span class="fs-6 badge badge-secondary" style="width: 130px;">SET BAG</span>
                <button id="set_bag_btn" type="button" class="btn btn-danger"
                    style="margin-left: 15px; margin-top: 10px; margin-bottom: 10px; ">SAVE</button><br>
                <span class="fs-6 badge badge-secondary" style="width: 130px;">SLOT 1</span>
                <select class="custom-select custom-select-sm" id="bag_1">
                    <option value="0">Empty (0)</option>
                </select><br>
                <span class="fs-6 badge badge-secondary" style="width: 130px;">SLOT 2</span>
                <select class="custom-select custom-select-sm" id="bag_2">
                    <option value="0">Empty (0)</option>
                </select><br>
                <span class="fs-6 badge badge-secondary" style="width: 130px;">SLOT 3</span>
                <select class="custom-select custom-select-sm" id="bag_3">
                    <option value="0">Empty (0)</option>
                </select><br>
            </div>
        </div>
    </div>

    </div>
    <script>
        const wax2 = new waxjs.WaxJS(base_api[parseInt(localStorage.getItem('wax_server')) ? parseInt(localStorage.getItem('wax_server')) : 0]);
        let userAccount2 = ""
        async function login() {
            try {
                
                userAccount2 = await wax2.login();
                document.getElementById("user_account").textContent = userAccount2;
                await updateBag(userAccount2)
            } catch (err) {
                console.log(err);
                await sleep(15000);
                window.location.reload();
            }
        }
        async function setName(account, name) {
            try {
                console.log(`${account} setting character name of account ${account}`);
                const setAvatar = {
                    'account': account,
                    'avatar_id': "1"
                };
                const setTag = {
                    'account': account,
                    'tag': name
                };
                const setAgreement = {
                    'account': account,
                    'terms_hash': "e2e07b7d7ece0d5f95d0144b5886ff74272c9873d7dbbc79bc56f047098e43ad",
                    'terms_id': "1"
                };
                const actions = [
                {
                    'account': 'federation',
                    'name': 'agreeterms',
                    'authorization': [{
                        'actor': account,
                        'permission': 'active'
                    }],
                    'data': setAgreement
                },
                {
                    'account': 'federation',
                    'name': 'setavatar',
                    'authorization': [{
                        'actor': account,
                        'permission': 'active'
                    }],
                    'data': setAvatar
                },
                {
                    'account': 'federation',
                    'name': 'settag',
                    'authorization': [{
                        'actor': account,
                        'permission': 'active'
                    }],
                    'data': setTag
                }
                ];
                let result = await wax2.api.transact({
                    actions,
                }, {
                    blocksBehind: 3,
                    expireSeconds: 90,
                });
                if (result && result.processed) {
                    let lands = result.processed.action_traces[0].act.data.land_id
                    return 'Set to lands: ' + lands;
                }
                return 0;
            } catch (error) {
                throw error;
            }
        }

        document.getElementById("char_name_btn").onclick = async function () {
            let result = await setName(userAccount, document.getElementById("char_name").value)
            if (result != 0 && result != null) {
                console.log('' + result);
            } else {
                console.log('Error: Cannot stake.');
            }
        };
        document.getElementById("stake_btn").onclick = async function () {
            let result = await stake(userAccount, document.getElementById("stake").value)
            if (result != 0 && result != null) {
                console.log('' + result);
            } else {
                console.log('Error: Cannot stake.');
            }
        };
        document.getElementById("unstake_btn").onclick = async function () {
            let result = await unstake(userAccount, document.getElementById("stake").value)
            if (result != 0 && result != null) {
                console.log('' + result);
            } else {
                console.log('Error: Cannot unstake.');
            }
        };
        document.getElementById("land_btn").onclick = async function () {
            let result = null
            try {
                result = await setLand(userAccount, document.getElementById("set_land").value)
            } catch (error) {
                console.log(error);
            }
            if (result != 0 && result != null) {
                console.log('Complete: ' + result);
            } else {
                console.log('Error: Cannot set land.');
            }
        };
        document.getElementById("set_bag_btn").onclick = async function () {
            try {
                await setBag(userAccount)
            } catch (err) {
                throw err;
            }
        };

        login()

    </script>
</body>
<footer class="footer">
</footer>

</html>